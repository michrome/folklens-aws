{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CloudFormation Template for Folklens",
  "Resources": {
    "FolklensLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Description": "The role assumed by our Lambda functions. The is is attached to the policy that allows us to write logs."
      }
    },

    "FolklensLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": { "Fn::Sub": "/aws/lambda/${EchoPayloadFunction}" },
        "RetentionInDays": 1
      }
    },

    "FolklensLogPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["logs:CreateLogStream", "logs:PutLogEvents"],
              "Resource": [{ "Fn::GetAtt": ["FolklensLogGroup", "Arn"] }]
            }
          ]
        },
        "PolicyName": "FolklensLogPolicy",
        "Roles": [{ "Ref": "FolklensLambdaRole" }]
      }
    },

    "FolklensApiGateway": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Description": "The gateway that receives HTTP requests from the internet",
        "Name": "Folklens API Gateway",
        "ProtocolType": "HTTP"
      }
    },

    "MyStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": { "Ref": "FolklensApiGateway" },
        "DeploymentId": { "Ref": "MyDeployment" },
        "Description": "The stage references the deployment (not the other way around) to ensure the stack can be cleanly deleted by CloudFormation. Note if we use the Quick create HTTP API syntax this is no longer needed.",
        "StageName": "$default"
      }
    },

    "EchoPayloadFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async (event) => {return event};"
        },
        "Description": "Returns the payload sent from the HTTP API to this function",
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": ["FolklensLambdaRole", "Arn"] },
        "Runtime": "nodejs14.x"
      }
    },

    "EchoPayloadPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "EchoPayloadFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              { "Ref": "AWS::Region" },
              ":",
              { "Ref": "AWS::AccountId" },
              ":",
              { "Ref": "FolklensApiGateway" },
              "/*"
            ]
          ]
        }
      }
    },

    "EchoPayloadIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": { "Ref": "FolklensApiGateway" },
        "Description": "The integration that connects our HTTP API to our Lambda function. Note if we use the Quick create HTTP API syntax this is no longer needed.",
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": ["EchoPayloadFunction", "Arn"]
              },
              "/invocations"
            ]
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },

    "EchoPayloadRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": { "Ref": "FolklensApiGateway" },
        "RouteKey": "GET /echo",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "EchoPayloadIntegration"
              }
            ]
          ]
        }
      }
    },

    "MyDeployment": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": ["EchoPayloadRoute"],
      "Properties": {
        "ApiId": { "Ref": "FolklensApiGateway" },
        "Description": "An atomic deployment of this API, stage and its routes. Note the stage should reference the deployment to ensure Cloudformation can cleanly delete the stack. Note if we use the Quick create HTTP API syntax this is no longer needed."
      }
    }
  }
}
